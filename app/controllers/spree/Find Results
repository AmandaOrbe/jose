Searching 2168 files for "requires_shipment?" (case sensitive)

/Users/miriam/code/masters/solidus-master/core/app/models/spree/shipment.rb:
   78
   79      def can_transition_from_pending_to_shipped?
   80:       !requires_shipment?
   81      end
   82
   ..
  388      end
  389
  390:     def requires_shipment?
  391        !stock_location || stock_location.fulfillable?
  392      end

2 matches in 1 file


Searching 2168 files for "image_tag" (case sensitive)

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/images/_image_row.html.erb:
   17        content: %{
   18          <div class='align-center'>
   19:           #{image_tag(image.attachment.url(:large))}
   20          </div>
   21        }.html_safe

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/images/edit.html.erb:
   18        <div data-hook="thumbnail" class="field col-2 align-center">
   19          <%= f.label t('spree.thumbnail') %><br>
   20:         <%= link_to image_tag(@image.attachment.url(:small)), @image.attachment.url(:product) %>
   21        </div>
   22        <div class="col-10">

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/shared/_image.html.erb:
    2
    3  <% if image && image.attachment? %>
    4:   <%= image_tag image.attachment(size) %>
    5  <% else %>
    6    <span class="image-placeholder <%= size %>"></span>

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/shared/_navigation_header.html.erb:
    1  <header class="admin-nav-header">
    2    <%= link_to spree.admin_path, class: 'brand-link' do %>
    3:     <%= image_tag(Spree::Config[:admin_interface_logo]) %>
    4    <%- end %>
    5  </header>

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/taxons/_form.html.erb:
   24        <%= f.label :icon %><br />
   25        <%= f.file_field :icon %>
   26:       <%= image_tag f.object.icon(:mini) if f.object.icon.present? %>
   27      <% end %>
   28    </div>

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/layouts/admin_style_guide.html.erb:
   15        <header>
   16          <%= link_to spree.admin_path, class: 'brand-link' do %>
   17:           <%- image_tag('solidus-style-guide-logo.png') %>
   18          <%- end %>
   19        </header>

/Users/miriam/code/masters/solidus-master/core/app/helpers/spree/base_helper.rb:
   59
   60      def logo(image_path = Spree::Config[:logo])
   61:       link_to image_tag(image_path), spree.root_path
   62      end
   63

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/checkout/payment/_gateway.html.erb:
    1: <%= image_tag 'credit_cards/credit_card.gif', id: 'credit-card-image' %>
    2  <% param_prefix = "payment_source[#{payment_method.id}]" %>
    3

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/content/cvv.html.erb:
    4    <p>To help reduce fraud in the card-not-present environment, credit card companies have introduced a card code program. Visa calls this code Card Verification Value (CVV); MasterCard calls it Card Validation Code (CVC); Discover calls it Card ID (CID). The card code is a three- or four- digit security code that is printed on the back of cards. The number typically appears at the end of the signature panel.</p>
    5    <div class="cid-caption">Visa</div>
    6:   <%= image_tag 'credit_cards/visa_cid.gif' %>
    7    <div class="cid-caption">Master Card</div>
    8:   <%= image_tag 'credit_cards/master_cid.jpg' %>
    9    <div class="cid-caption">American Express</div>
   10:   <%= image_tag 'credit_cards/amex_cid.gif' %>
   11    <div class="cid-caption">Discover</div>
   12:   <%= image_tag 'credit_cards/discover_cid.gif' %>
   13  </div>
   14

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/orders/_line_item.html.erb:
   31      </td>
   32      <td class="cart-item-delete" data-hook="cart_item_delete">
   33:       <%= link_to image_tag('icons/delete.png'), '#', class: 'delete', id: "delete_#{dom_id(line_item)}" %>
   34      </td>
   35    </tr>

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/payments/_payment.html.erb:
    3    <span class="cc-type">
    4      <% unless (cc_type = source.cc_type).blank? %>
    5:       <%= image_tag "credit_cards/icons/#{cc_type}.png" %>
    6      <% end %>
    7      <% if source.last_digits %>

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/products/_thumbnails.html.erb:
    4      <% @product.images.each do |i| %>
    5        <li class='tmb-all tmb-<%= i.viewable.id %>'>
    6:         <%= link_to(image_tag(i.attachment.url(:mini)), i.attachment.url(:product)) %>
    7        </li>
    8      <% end %>
    .
   12          <% next if @product.images.include?(i) %>
   13          <li class='vtmb tmb-<%= i.viewable.id %>'>
   14:           <%= link_to(image_tag(i.attachment.url(:mini)), i.attachment.url(:product)) %>
   15          </li>
   16        <% end %>

/Users/miriam/code/masters/solidus-master/frontend/app/views/spree/shared/_image.html.erb:
    4  <% if image && image.attachment? %>
    5    <% if itemprop %>
    6:     <%= image_tag image.attachment(size), itemprop: itemprop %>
    7    <% else %>
    8:     <%= image_tag image.attachment(size) %>
    9    <% end %>
   10  <% else %>

18 matches across 13 files


Searching 2168 files for "mailer" (case sensitive)

/Users/miriam/code/masters/solidus-master/CHANGELOG.md:
  202  - Fix return url after fire in return_authorizations controller [#2284](https://github.com/solidusio/solidus/pull/2284) ([rbngzlv](https://github.com/rbngzlv))
  203  - Remove `after_rollback` from LogEntry [#2280](https://github.com/solidusio/solidus/pull/2280) [#2277](https://github.com/solidusio/solidus/pull/2277) ([reidcooper](https://github.com/reidcooper) [jhawthorn](https://github.com/jhawthorn))
  204: - Make `solidus_core` depend on actionmailer and activerecord instead of rails [#2272](https://github.com/solidusio/solidus/pull/2272) ([BenMorganIO](https://github.com/BenMorganIO))
  205  - Improve performance of Taxon promotion rule [#2258](https://github.com/solidusio/solidus/pull/2258) ([gmacdougall](https://github.com/gmacdougall))
  206  - Fix class definition of variant [#2248](https://github.com/solidusio/solidus/pull/2248) ([cbrunsdon](https://github.com/cbrunsdon))
  ...
  509  - The default behaviour for selecting the current store has changed. Stores are now only returned if their url matches the current domain exactly (falling back to the default store) [\#2041](https://github.com/solidusio/solidus/pull/2041) [\#1993](https://github.com/solidusio/solidus/pull/1993) ([jhawthorn](https://github.com/jhawthorn), [kennyadsl](https://github.com/kennyadsl))
  510
  511: - Remove dependency on premailer gem [\#2061](https://github.com/solidusio/solidus/pull/2061) ([cbrunsdon](https://github.com/cbrunsdon))
  512
  513  - Order#outstanding_balance now uses reimbursements instead of refunds to calculate the amount that should be paid on an order. [#2002](https://github.com/solidusio/solidus/pull/2002) (many contributors :heart:)

/Users/miriam/code/masters/solidus-master/README.md:
   21  * [`solidus_frontend`](https://github.com/solidusio/solidus/tree/master/frontend) (Cart and storefront)
   22  * [`solidus_backend`](https://github.com/solidusio/solidus/tree/master/backend) (Admin area)
   23: * [`solidus_core`](https://github.com/solidusio/solidus/tree/master/core) (Essential models, mailers, and classes)
   24  * [`solidus_sample`](https://github.com/solidusio/solidus/tree/master/sample) (Sample data)
   25

/Users/miriam/code/masters/solidus-master/api/app/controllers/spree/api/shipments_controller.rb:
   71          authorize! :ship, @shipment
   72          unless @shipment.shipped?
   73:           @shipment.suppress_mailer = (params[:send_mailer] == 'false')
   74            @shipment.ship!
   75          end

/Users/miriam/code/masters/solidus-master/api/spec/requests/spree/api/shipments_controller_spec.rb:
  296      let(:shipment) { create(:order_ready_to_ship).shipments.first }
  297
  298:     let(:send_mailer) { nil }
  299
  300      subject do
  301:       put spree.ship_api_shipment_path(shipment), params: { send_mailer: send_mailer }
  302      end
  303
  ...
  317          subject { perform_enqueued_jobs { super() } }
  318
  319:         context "send_mailer not present" do
  320:           it "sends the shipped shipments mailer" do
  321              expect { subject }.to change { ActionMailer::Base.deliveries.size }.by(1)
  322              expect(ActionMailer::Base.deliveries.last.subject).to match /Shipment Notification/
  ...
  324          end
  325
  326:         context "send_mailer set to false" do
  327:           let(:send_mailer) { 'false' }
  328:           it "does not send the shipped shipments mailer" do
  329              expect { subject }.to_not change { ActionMailer::Base.deliveries.size }
  330            end
  331          end
  332
  333:         context "send_mailer set to true" do
  334:           let(:send_mailer) { 'true' }
  335:           it "sends the shipped shipments mailer" do
  336              expect { subject }.to change { ActionMailer::Base.deliveries.size }.by(1)
  337              expect(ActionMailer::Base.deliveries.last.subject).to match /Shipment Notification/

/Users/miriam/code/masters/solidus-master/backend/app/assets/javascripts/spree/backend/shipments.js:
   49        url: Spree.routes.shipments_api + "/" + this.shipment_number + "/ship",
   50        data: {
   51:         send_mailer: this.$("[name='send_mailer']").is(":checked")
   52        },
   53        success: function(){

/Users/miriam/code/masters/solidus-master/backend/app/views/spree/admin/orders/_shipment.html.erb:
   18        <%= form_tag("#", class: "admin-ship-shipment") do %>
   19          <label>
   20:           <%= check_box_tag :send_mailer, true, true %>
   21:           <%= t('spree.send_mailer') %>
   22          </label>
   23          <%= submit_tag t('spree.actions.ship'), class: "ship-shipment-button" %>

/Users/miriam/code/masters/solidus-master/backend/spec/features/admin/orders/shipments_spec.rb:
   48      end
   49
   50:     it "doesn't send a shipping confirmation email when ask to suppress the mailer" do
   51        uncheck 'Send Mailer'
   52

/Users/miriam/code/masters/solidus-master/core/solidus_core.gemspec:
    7    s.name        = 'solidus_core'
    8    s.version     = Spree.solidus_version
    9:   s.summary     = 'Essential models, mailers, and classes for the Solidus e-commerce project.'
   10    s.description = s.summary
   11
   ..
   22
   23    %w[
   24:     actionmailer actionpack actionview activejob activemodel activerecord
   25      activesupport railties
   26    ].each do |rails_dep|

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/carton_mailer.rb:
   23        @store = @order.store
   24        subject = (options[:resend] ? "[#{t('spree.resend').upcase}] " : '')
   25:       subject += "#{@store.name} #{t('spree.shipment_mailer.shipped_email.subject')} ##{@order.number}"
   26        mail(to: @order.email, from: from_address(@store), subject: subject)
   27      end

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/order_mailer.rb:
   22        @order, @inventory_units = order, inventory_units
   23        @store = @order.store
   24:       subject = build_subject(t('spree.order_mailer.inventory_cancellation.subject'), resend)
   25
   26        mail(to: @order.email, from: from_address(@store), subject: subject)

/Users/miriam/code/masters/solidus-master/core/app/models/spree/order_cancellations.rb:
   11
   12    # allows sending an email when inventory is cancelled
   13:   class_attribute :send_cancellation_mailer
   14:   self.send_cancellation_mailer = true
   15
   16    def initialize(order)
   ..
   41
   42          update_shipped_shipments(inventory_units)
   43:         Spree::OrderMailer.inventory_cancellation_email(@order, inventory_units.to_a).deliver_later if Spree::OrderCancellations.send_cancellation_mailer
   44        end
   45

/Users/miriam/code/masters/solidus-master/core/app/models/spree/order_shipping.rb:
   16    # @param tracking_number An optional tracking number.
   17    # @return The carton created.
   18:   def ship_shipment(shipment, external_number: nil, tracking_number: nil, suppress_mailer: false)
   19      ship(
   20        inventory_units: shipment.inventory_units.shippable,
   ..
   27        # OrderShipping#ship rather than vice versa
   28        tracking_number: tracking_number || shipment.tracking,
   29:       suppress_mailer: suppress_mailer
   30      )
   31    end
   ..
   44    # @return The carton created.
   45    def ship(inventory_units:, stock_location:, address:, shipping_method:,
   46:            shipped_at: Time.current, external_number: nil, tracking_number: nil, suppress_mailer: false)
   47
   48      carton = nil
   ..
   74      end
   75
   76:     send_shipment_emails(carton) if stock_location.fulfillable? && !suppress_mailer # e.g. digital gift cards that aren't actually shipped
   77      @order.recalculate
   78

/Users/miriam/code/masters/solidus-master/core/app/models/spree/shipment.rb:
   19      before_destroy :ensure_can_destroy
   20
   21:     # TODO: remove the suppress_mailer temporary variable once we are calling 'ship'
   22      # from outside of the state machine and can actually pass variables through.
   23:     attr_accessor :special_instructions, :suppress_mailer
   24
   25      accepts_nested_attributes_for :inventory_units
   ..
  400
  401      def after_ship
  402:       order.shipping.ship_shipment(self, suppress_mailer: suppress_mailer)
  403      end
  404

/Users/miriam/code/masters/solidus-master/core/app/views/layouts/spree/base_mailer.html.erb:
  754        <td class="center" align="center" valign="top">
  755          <center>
  756:           <%= render partial: 'spree/shared/base_mailer_header' %>
  757            <table class="container">
  758              <tr>
  ...
  772                    </tr>
  773                  </table>
  774:                 <%= render partial: 'spree/shared/base_mailer_footer' %>
  775                <!-- container end below -->
  776                </td>

/Users/miriam/code/masters/solidus-master/core/app/views/spree/carton_mailer/shipped_email.html.erb:
    3      <td>
    4        <p class="lede">
    5:         <%= t('spree.shipment_mailer.shipped_email.dear_customer') %>
    6        </p>
    7        <p>
    8:         <%= t('spree.shipment_mailer.shipped_email.instructions') %>
    9        </p>
   10        <p>
   11:         <%= t('spree.shipment_mailer.shipped_email.shipment_summary') %>
   12        </p>
   13        <table>
   ..
   21        </table>
   22        <p>
   23:         <%= t('spree.shipment_mailer.shipped_email.track_information', tracking: @carton.tracking) if @carton.tracking %>
   24        </p>
   25        <p>
   26:         <%= t('spree.shipment_mailer.shipped_email.track_link', url: @carton.tracking_url) if @carton.tracking_url %>
   27        </p>
   28        <p>
   29:         <%= t('spree.shipment_mailer.shipped_email.thanks') %>
   30        </p>
   31      </td>

/Users/miriam/code/masters/solidus-master/core/app/views/spree/carton_mailer/shipped_email.text.erb:
    1: <%= t('spree.shipment_mailer.shipped_email.dear_customer') %>
    2
    3: <%= t('spree.shipment_mailer.shipped_email.instructions') %>
    4
    5  ============================================================
    6: <%= t('spree.shipment_mailer.shipped_email.shipment_summary') %>
    7  ============================================================
    8  <% @manifest.each do |item| %>
    .
   11  ============================================================
   12
   13: <%= t('spree.shipment_mailer.shipped_email.track_information', tracking: @carton.tracking) if @carton.tracking %>
   14: <%= t('spree.shipment_mailer.shipped_email.track_link', url: @carton.tracking_url) if @carton.tracking_url %>
   15
   16: <%= t('spree.shipment_mailer.shipped_email.thanks') %>
   17

/Users/miriam/code/masters/solidus-master/core/app/views/spree/order_mailer/inventory_cancellation_email.html.erb:
    3      <td>
    4        <p class="lede">
    5:         <%= t('spree.order_mailer.inventory_cancellation.dear_customer') %>
    6        </p>
    7        <p>
    8:         <%= t('spree.order_mailer.inventory_cancellation.instructions') %>
    9        </p>
   10        <p>
   11:         <%= t('spree.order_mailer.inventory_cancellation.order_summary_canceled') %>
   12        </p>
   13        <table>

/Users/miriam/code/masters/solidus-master/core/app/views/spree/order_mailer/inventory_cancellation_email.text.erb:
    1: <%= t('order_mailer.inventory_cancellation.dear_customer') %>
    2
    3: <%= t('order_mailer.inventory_cancellation.instructions') %>
    4
    5  ============================================================
    6: <%= t('order_mailer.inventory_cancellation.order_summary_canceled') %>
    7  ============================================================
    8  <% @inventory_units.each do |item| %>

/Users/miriam/code/masters/solidus-master/core/app/views/spree/test_mailer/test_email.html.erb:
   32          Therefore, you will need a gem that will be able to remove your <code>&lt;style&gt;</code>
   33          tags and place them inline. Gmail only supports inline styles. We suggest
   34:         <a href="https://github.com/fphilipe/premailer-rails" target="_blank">Premailer for Rails</a>.
   35        </p>
   36

/Users/miriam/code/masters/solidus-master/core/config/locales/en.yml:
  722        unauthenticated: You need to sign in or sign up before continuing.
  723        unconfirmed: You have to confirm your account before continuing.
  724:     mailer:
  725        confirmation_instructions:
  726          subject: Confirmation instructions
  ...
 1572      order_email_resent: Order Email Resent
 1573      order_information: Order Information
 1574:     order_mailer:
 1575        cancel_email:
 1576          dear_customer: Dear Customer,
 ....
 1699      promotion_action: Promotion Action
 1700      promotion_actions: Actions
 1701:     promotion_code_batch_mailer:
 1702        promotion_code_batch_finished:
 1703          subject: Promotion code batch finished
 ....
 1799      return_items_cannot_be_associated_with_multiple_orders: Return items cannot be associated with multiple orders.
 1800      return_items_cannot_be_created_for_inventory_units_that_are_already_awaiting_exchange: Return items cannot be created for inventory units that are already awaiting exchange.
 1801:     reimbursement_mailer:
 1802        reimbursement_email:
 1803          days_to_send: ! 'You have %{days} days to send back any items awaiting exchange.'
 ....
 1841      selected_quantity_not_available: ! 'selected of %{item} is not available.'
 1842      send_copy_of_all_mails_to: Send Copy of All Mails To
 1843:     send_mailer: Send Mailer
 1844      send_mails_as: Send Mails As
 1845      server: Server
 ....
 1854      shipment_adjustments: "Shipment adjustments"
 1855      shipment_details: "From %{stock_location} via %{shipping_method}"
 1856:     shipment_mailer:
 1857        shipped_email:
 1858          dear_customer: Dear Customer,
 ....
 2008      taxons: Taxons
 2009      test: Test
 2010:     test_mailer:
 2011        test_email:
 2012          greeting: Congratulations!

/Users/miriam/code/masters/solidus-master/core/lib/generators/spree/dummy/templates/rails/test.rb:
   27    # The :test delivery method accumulates sent emails in the
   28    # ActionMailer::Base.deliveries array.
   29:   config.action_mailer.delivery_method = :test
   30    ActionMailer::Base.default from: "spree@example.com"
   31

/Users/miriam/code/masters/solidus-master/core/lib/spree/core/engine.rb:
   45        end
   46
   47:       # Load in mailer previews for apps to use in development.
   48        # We need to make sure we call `Preview.all` before requiring our
   49        # previews, otherwise any previews the app attempts to add need to be
   50        # manually required.
   51        if Rails.env.development?
   52:         initializer "spree.mailer_previews" do
   53            ActionMailer::Preview.all
   54:           Dir[root.join("lib/spree/mailer_previews/**/*_preview.rb")].each do |file|
   55              require_dependency file
   56            end

/Users/miriam/code/masters/solidus-master/core/lib/spree/testing_support/dummy_app.rb:
    7  require 'active_record/railtie'
    8  require 'action_controller/railtie'
    9: require 'action_mailer/railtie'
   10
   11  Rails.env = 'test'
   ..
   54      config.action_dispatch.show_exceptions            = false
   55      config.active_support.deprecation                 = :stderr
   56:     config.action_mailer.delivery_method              = :test
   57      config.action_controller.allow_forgery_protection = false
   58      config.active_support.deprecation                 = :stderr

/Users/miriam/code/masters/solidus-master/core/spec/mailers/carton_mailer_spec.rb:
   26        context "pt-BR locale" do
   27          before do
   28:           pt_br_shipped_email = { spree: { shipment_mailer: { shipped_email: { dear_customer: 'Caro Cliente,' } } } }
   29            I18n.backend.store_translations :'pt-BR', pt_br_shipped_email
   30            I18n.locale = :'pt-BR'

/Users/miriam/code/masters/solidus-master/core/spec/mailers/order_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::OrderMailer, type: :mailer do
    6    let(:order) do
    7      order = create(:order)
    .
   61      # Regression test for https://github.com/spree/spree/issues/2772
   62
   63:     # Tests mailer view spree/order_mailer/confirm_email.text.erb
   64      specify do
   65        confirmation_email = Spree::OrderMailer.confirm_email(order)
   ..
   68      end
   69
   70:     # Tests mailer view spree/order_mailer/cancel_email.text.erb
   71      specify do
   72        cancel_email = Spree::OrderMailer.cancel_email(order)
   ..
   80        before do
   81          I18n.enforce_available_locales = false
   82:         pt_br_confirm_mail = { spree: { order_mailer: { confirm_email: { dear_customer: 'Caro Cliente,' } } } }
   83:         pt_br_cancel_mail = { spree: { order_mailer: { cancel_email: { order_summary_canceled: 'Resumo da Pedido [CANCELADA]' } } } }
   84          I18n.backend.store_translations :'pt-BR', pt_br_confirm_mail
   85          I18n.backend.store_translations :'pt-BR', pt_br_cancel_mail

/Users/miriam/code/masters/solidus-master/core/spec/mailers/promotion_code_batch_mailer_spec.rb:
    2
    3  require 'rails_helper'
    4: RSpec.describe Spree::PromotionCodeBatchMailer, type: :mailer do
    5    let(:promotion) { create(:promotion, name: "Promotion Test") }
    6    let(:promotion_code_batch) do

/Users/miriam/code/masters/solidus-master/core/spec/mailers/reimbursement_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::ReimbursementMailer, type: :mailer do
    6    let(:reimbursement) { create(:reimbursement) }
    7
    .
   17          before do
   18            I18n.enforce_available_locales = false
   19:           pt_br_shipped_email = { spree: { reimbursement_mailer: { reimbursement_email: { dear_customer: 'Caro Cliente,' } } } }
   20            I18n.backend.store_translations :'pt-BR', pt_br_shipped_email
   21            I18n.locale = :'pt-BR'

/Users/miriam/code/masters/solidus-master/core/spec/mailers/test_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::TestMailer, type: :mailer do
    6    let(:user) { create(:user) }
    7

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order_cancellations_spec.rb:
  105      end
  106
  107:     context "when send_cancellation_mailer is false" do
  108        subject { Spree::OrderCancellations.new(order).short_ship([inventory_unit]) }
  109
  110        before do
  111:         @original_send_boolean = Spree::OrderCancellations.send_cancellation_mailer
  112:         Spree::OrderCancellations.send_cancellation_mailer = false
  113        end
  114
  115:       after { Spree::OrderCancellations.send_cancellation_mailer = @original_send_boolean }
  116
  117        it "does not send a cancellation email" do

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order_shipping_spec.rb:
  104      end
  105
  106:     context "when told to suppress the mailer" do
  107        subject do
  108          order.shipping.ship(
  ...
  111            address: address,
  112            shipping_method: shipping_method,
  113:           suppress_mailer: true
  114          )
  115        end
  ...
  215      end
  216
  217:     context "when told to suppress the mailer" do
  218        subject do
  219          order.shipping.ship_shipment(
  220            shipment,
  221:           suppress_mailer: true
  222          )
  223        end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/reimbursement_spec.rb:
  146      end
  147
  148:     it "triggers the reimbursement mailer to be sent" do
  149        expect(Spree::ReimbursementMailer).to receive(:reimbursement_email).with(reimbursement.id) { double(deliver_later: true) }
  150        subject

93 matches across 31 files





Searching 2168 files for "Mailer" (case sensitive)

/Users/miriam/code/masters/solidus-master/CHANGELOG.md:
  638  - Remove duplicated require in shipment factory [\#1769](https://github.com/solidusio/solidus/pull/1769) ([upinetree](https://github.com/upinetree))
  639  - Fix an issue where updating a user in the admin without specifying roles in would clear the existing roles.[\#1747](https://github.com/solidusio/solidus/pull/1747) ([tvdeyen](https://github.com/tvdeyen))
  640: - Fix the 'Send Mailer' checkbox selection [\#1716](https://github.com/solidusio/solidus/pull/1716) ([jhawthorn](https://github.com/jhawthorn))
  641  - Rearrange AR relation declarations in order.rb in preparation for Rails 5.1 [\#1740](https://github.com/solidusio/solidus/pull/1740) ([jhawthorn](https://github.com/jhawthorn))
  642  - Fix issue where OrderInventory creates superfluous InventoryUnits [\#1751](https://github.com/solidusio/solidus/pull/1751) ([jhawthorn](https://github.com/jhawthorn))

/Users/miriam/code/masters/solidus-master/api/spec/requests/spree/api/shipments_controller_spec.rb:
  319          context "send_mailer not present" do
  320            it "sends the shipped shipments mailer" do
  321:             expect { subject }.to change { ActionMailer::Base.deliveries.size }.by(1)
  322:             expect(ActionMailer::Base.deliveries.last.subject).to match /Shipment Notification/
  323            end
  324          end
  ...
  327            let(:send_mailer) { 'false' }
  328            it "does not send the shipped shipments mailer" do
  329:             expect { subject }.to_not change { ActionMailer::Base.deliveries.size }
  330            end
  331          end
  ...
  334            let(:send_mailer) { 'true' }
  335            it "sends the shipped shipments mailer" do
  336:             expect { subject }.to change { ActionMailer::Base.deliveries.size }.by(1)
  337:             expect(ActionMailer::Base.deliveries.last.subject).to match /Shipment Notification/
  338            end
  339          end

/Users/miriam/code/masters/solidus-master/backend/app/controllers/spree/admin/orders_controller.rb:
  141
  142        def resend
  143:         OrderMailer.confirm_email(@order, true).deliver_later
  144          flash[:success] = t('spree.order_email_resent')
  145

/Users/miriam/code/masters/solidus-master/backend/spec/controllers/spree/admin/orders_controller_spec.rb:
   59        it "resends order email" do
   60          mail_message = double "Mail::Message"
   61:         expect(Spree::OrderMailer).to receive(:confirm_email).with(order, true).and_return mail_message
   62          expect(mail_message).to receive :deliver_later
   63          post :resend, params: { id: order.number }

/Users/miriam/code/masters/solidus-master/backend/spec/features/admin/orders/shipments_spec.rb:
   45            ship_shipment
   46          }
   47:       }.to change{ ActionMailer::Base.deliveries.count }.by(1)
   48      end
   49
   50      it "doesn't send a shipping confirmation email when ask to suppress the mailer" do
   51:       uncheck 'Send Mailer'
   52
   53        expect {
   ..
   55            ship_shipment
   56          }
   57:       }.not_to change{ ActionMailer::Base.deliveries.count }
   58      end
   59    end

/Users/miriam/code/masters/solidus-master/core/app/jobs/spree/promotion_code_batch_job.rb:
   11
   12        if promotion_code_batch.email?
   13:         Spree::PromotionCodeBatchMailer
   14            .promotion_code_batch_finished(promotion_code_batch)
   15            .deliver_now
   ..
   17      rescue StandardError => e
   18        if promotion_code_batch.email?
   19:         Spree::PromotionCodeBatchMailer
   20            .promotion_code_batch_errored(promotion_code_batch)
   21            .deliver_now

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/base_mailer.rb:
    2
    3  module Spree
    4:   class BaseMailer < ActionMailer::Base
    5      def from_address(store)
    6        store.mail_from_address

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/carton_mailer.rb:
    2
    3  module Spree
    4:   class CartonMailer < BaseMailer
    5      # Send an email to customers to notify that an individual carton has been
    6      # shipped. If a carton contains items from multiple orders then this will be

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/order_mailer.rb:
    2
    3  module Spree
    4:   class OrderMailer < BaseMailer
    5      def confirm_email(order, resend = false)
    6        @order = order

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/promotion_code_batch_mailer.rb:
    2
    3  module Spree
    4:   class PromotionCodeBatchMailer < Spree::BaseMailer
    5      def promotion_code_batch_finished(promotion_code_batch)
    6        @promotion_code_batch = promotion_code_batch

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/reimbursement_mailer.rb:
    2
    3  module Spree
    4:   class ReimbursementMailer < BaseMailer
    5      def reimbursement_email(reimbursement, resend = false)
    6        @reimbursement = reimbursement.respond_to?(:id) ? reimbursement : Spree::Reimbursement.find(reimbursement)

/Users/miriam/code/masters/solidus-master/core/app/mailers/spree/test_mailer.rb:
    2
    3  module Spree
    4:   class TestMailer < BaseMailer
    5      def test_email(email)
    6        store = Spree::Store.default

/Users/miriam/code/masters/solidus-master/core/app/models/spree/order.rb:
  449
  450      def deliver_order_confirmation_email
  451:       Spree::OrderMailer.confirm_email(self).deliver_later
  452        update_column(:confirmation_delivered, true)
  453      end
  ...
  890
  891      def send_cancel_email
  892:       Spree::OrderMailer.cancel_email(self).deliver_later
  893      end
  894

/Users/miriam/code/masters/solidus-master/core/app/models/spree/order_cancellations.rb:
   41
   42          update_shipped_shipments(inventory_units)
   43:         Spree::OrderMailer.inventory_cancellation_email(@order, inventory_units.to_a).deliver_later if Spree::OrderCancellations.send_cancellation_mailer
   44        end
   45

/Users/miriam/code/masters/solidus-master/core/app/models/spree/reimbursement.rb:
  163
  164      def send_reimbursement_email
  165:       Spree::ReimbursementMailer.reimbursement_email(id).deliver_later
  166      end
  167

/Users/miriam/code/masters/solidus-master/core/config/locales/en.yml:
 1841      selected_quantity_not_available: ! 'selected of %{item} is not available.'
 1842      send_copy_of_all_mails_to: Send Copy of All Mails To
 1843:     send_mailer: Send Mailer
 1844      send_mails_as: Send Mails As
 1845      server: Server

/Users/miriam/code/masters/solidus-master/core/lib/generators/spree/dummy/templates/rails/test.rb:
   24    config.action_controller.allow_forgery_protection    = false
   25
   26:   # Tell Action Mailer not to deliver emails to the real world.
   27    # The :test delivery method accumulates sent emails in the
   28:   # ActionMailer::Base.deliveries array.
   29    config.action_mailer.delivery_method = :test
   30:   ActionMailer::Base.default from: "spree@example.com"
   31
   32    # Raise on deprecation warnings

/Users/miriam/code/masters/solidus-master/core/lib/spree/app_configuration.rb:
  308      class_name_attribute :shipping_rate_tax_calculator_class, default: 'Spree::TaxCalculator::ShippingRate'
  309
  310:     # Allows providing your own Mailer for shipped cartons.
  311      #
  312      # @!attribute [rw] carton_shipped_email_class
  313:     # @return [ActionMailer::Base] an object that responds to "shipped_email"
  314:     #   (e.g. an ActionMailer with a "shipped_email" method) with the same
  315:     #   signature as Spree::CartonMailer.shipped_email.
  316:     class_name_attribute :carton_shipped_email_class, default: 'Spree::CartonMailer'
  317
  318      # Allows providing your own class for merging two orders.

/Users/miriam/code/masters/solidus-master/core/lib/spree/core/engine.rb:
   51        if Rails.env.development?
   52          initializer "spree.mailer_previews" do
   53:           ActionMailer::Preview.all
   54            Dir[root.join("lib/spree/mailer_previews/**/*_preview.rb")].each do |file|
   55              require_dependency file

/Users/miriam/code/masters/solidus-master/core/lib/spree/mailer_previews/carton_preview.rb:
    2
    3  module Spree
    4:   class MailerPreviews
    5:     class CartonPreview < ActionMailer::Preview
    6        def shipped
    7          carton = Carton.joins(:orders).last

/Users/miriam/code/masters/solidus-master/core/lib/spree/mailer_previews/order_preview.rb:
    2
    3  module Spree
    4:   class MailerPreviews
    5:     class OrderPreview < ActionMailer::Preview
    6        def confirm
    7          order = Order.complete.last
    8          raise "Your database needs at least one completed order to render this preview" unless order
    9:         OrderMailer.confirm_email(order)
   10        end
   11
   ..
   13          order = Order.with_state(:canceled).last
   14          raise "Your database needs at least one cancelled order to render this preview" unless order
   15:         OrderMailer.cancel_email(order)
   16        end
   17
   ..
   19          order = Spree::Order.joins(:inventory_units).merge(Spree::InventoryUnit.canceled).last
   20          raise "Your database needs at least one order with a canceled inventory unit to render this preview" unless order
   21:         OrderMailer.inventory_cancellation_email(order, [order.inventory_units.first])
   22        end
   23      end

/Users/miriam/code/masters/solidus-master/core/lib/spree/mailer_previews/reimbursement_preview.rb:
    2
    3  module Spree
    4:   class MailerPreviews
    5:     class ReimbursementPreview < ActionMailer::Preview
    6        def reimbursement
    7          reimbursement = Reimbursement.last
    8          raise "Your database needs at least one Reimbursement to render this preview" unless reimbursement
    9:         ReimbursementMailer.reimbursement_email(reimbursement)
   10        end
   11      end

/Users/miriam/code/masters/solidus-master/core/lib/spree/testing_support/dummy_app.rb:
   23
   24  # @private
   25: class ApplicationMailer < ActionMailer::Base
   26  end
   27
   ..
   89      config.paths['config/routes.rb'] = File.expand_path('dummy_app/routes.rb', __dir__)
   90
   91:     ActionMailer::Base.default from: "store@example.com"
   92    end
   93  end

/Users/miriam/code/masters/solidus-master/core/lib/tasks/email.rake:
    5    task test: :environment do
    6      raise ArgumentError, "Must pass EMAIL environment variable. Example: EMAIL=spree@example.com bundle exec rake email:test" unless ENV['EMAIL'].present?
    7:     Spree::TestMailer.test_email(ENV['EMAIL']).deliver!
    8    end
    9  end

/Users/miriam/code/masters/solidus-master/core/spec/jobs/promotion_code_batch_job_spec.rb:
   14    context "with a successful build" do
   15      before do
   16:       allow(Spree::PromotionCodeBatchMailer)
   17          .to receive(:promotion_code_batch_finished)
   18          .and_call_original
   ..
   51        it "sends an email" do
   52          subject.perform(promotion_code_batch)
   53:         expect(Spree::PromotionCodeBatchMailer)
   54            .to have_received(:promotion_code_batch_finished)
   55        end
   ..
   59        it "sends an email" do
   60          subject.perform(promotion_code_batch)
   61:         expect(Spree::PromotionCodeBatchMailer)
   62            .to_not have_received(:promotion_code_batch_finished)
   63        end
   ..
   71          .and_raise("Error")
   72
   73:       allow(Spree::PromotionCodeBatchMailer)
   74          .to receive(:promotion_code_batch_errored)
   75          .and_call_original
   ..
   81      context "with an email address" do
   82        it "sends an email" do
   83:         expect(Spree::PromotionCodeBatchMailer)
   84            .to have_received(:promotion_code_batch_errored)
   85        end
   ..
   89        let(:email) { nil }
   90        it "sends an email" do
   91:         expect(Spree::PromotionCodeBatchMailer)
   92            .to_not have_received(:promotion_code_batch_errored)
   93        end

/Users/miriam/code/masters/solidus-master/core/spec/mailers/carton_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::CartonMailer do
    6    let(:carton) { create(:carton) }
    7    let(:order) { carton.orders.first }
    .
    9    # Regression test for https://github.com/spree/spree/issues/2196
   10    it "doesn't include out of stock in the email body" do
   11:     shipment_email = Spree::CartonMailer.shipped_email(order: order, carton: carton)
   12      expect(shipment_email.parts.first.body).not_to include(%{Out of Stock})
   13      expect(shipment_email.parts.first.body).to include(%{Your order has been shipped})
   ..
   17    context "with resend option" do
   18      subject do
   19:       Spree::CartonMailer.shipped_email(order: order, carton: carton, resend: true).subject
   20      end
   21      it { is_expected.to match /^\[RESEND\] / }
   ..
   36
   37          specify do
   38:           shipped_email = Spree::CartonMailer.shipped_email(order: order, carton: carton)
   39            expect(shipped_email.parts.first.body).to include("Caro Cliente,")
   40          end

/Users/miriam/code/masters/solidus-master/core/spec/mailers/order_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::OrderMailer, type: :mailer do
    6    let(:order) do
    7      order = create(:order)
    .
   18
   19    it "uses the order's store for the from address" do
   20:     message = Spree::OrderMailer.confirm_email(order)
   21      expect(message.from).to eq ["store@example.com"]
   22    end
   23
   24    it "doesn't aggressively escape double quotes in confirmation body" do
   25:     confirmation_email = Spree::OrderMailer.confirm_email(order)
   26      expect(confirmation_email.body).not_to include("&quot;")
   27    end
   ..
   46      end
   47
   48:     let!(:confirmation_email) { Spree::OrderMailer.confirm_email(order) }
   49:     let!(:cancel_email) { Spree::OrderMailer.cancel_email(order) }
   50
   51      specify do
   ..
   63      # Tests mailer view spree/order_mailer/confirm_email.text.erb
   64      specify do
   65:       confirmation_email = Spree::OrderMailer.confirm_email(order)
   66        expect(confirmation_email.parts.first.body).to include("4.99")
   67        expect(confirmation_email.parts.first.body).to_not include("5.00")
   ..
   70      # Tests mailer view spree/order_mailer/cancel_email.text.erb
   71      specify do
   72:       cancel_email = Spree::OrderMailer.cancel_email(order)
   73        expect(cancel_email.parts.first.body).to include("4.99")
   74        expect(cancel_email.parts.first.body).to_not include("5.00")
   ..
   94        context "confirm_email" do
   95          specify do
   96:           confirmation_email = Spree::OrderMailer.confirm_email(order)
   97            expect(confirmation_email.parts.first.body).to include("Caro Cliente,")
   98          end
   ..
  101        context "cancel_email" do
  102          specify do
  103:           cancel_email = Spree::OrderMailer.cancel_email(order)
  104            expect(cancel_email.parts.first.body).to include("Resumo da Pedido [CANCELADA]")
  105          end
  ...
  111      it "sends no email" do
  112        Spree::Config.send_core_emails = false
  113:       message = Spree::OrderMailer.confirm_email(order)
  114        expect(message.body).to be_blank
  115      end

/Users/miriam/code/masters/solidus-master/core/spec/mailers/promotion_code_batch_mailer_spec.rb:
    2
    3  require 'rails_helper'
    4: RSpec.describe Spree::PromotionCodeBatchMailer, type: :mailer do
    5    let(:promotion) { create(:promotion, name: "Promotion Test") }
    6    let(:promotion_code_batch) do

/Users/miriam/code/masters/solidus-master/core/spec/mailers/reimbursement_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::ReimbursementMailer, type: :mailer do
    6    let(:reimbursement) { create(:reimbursement) }
    7
    .
    9      expect(Spree::Reimbursement).to receive(:find).with(reimbursement.id).and_return(reimbursement)
   10
   11:     Spree::ReimbursementMailer.reimbursement_email(reimbursement.id).body
   12    end
   13
   ..
   28
   29          specify do
   30:           reimbursement_email = Spree::ReimbursementMailer.reimbursement_email(reimbursement)
   31            expect(reimbursement_email.parts.first.body).to include("Caro Cliente,")
   32          end

/Users/miriam/code/masters/solidus-master/core/spec/mailers/test_mailer_spec.rb:
    3  require 'rails_helper'
    4
    5: RSpec.describe Spree::TestMailer, type: :mailer do
    6    let(:user) { create(:user) }
    7
    8    it "confirm_email accepts a user id as an alternative to a User object" do
    9:     Spree::TestMailer.test_email('test@example.com')
   10    end
   11  end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order_cancellations_spec.rb:
  100      it "sends a cancellation email" do
  101        mail_double = double
  102:       expect(Spree::OrderMailer).to receive(:inventory_cancellation_email).with(order, [inventory_unit]).and_return(mail_double)
  103        expect(mail_double).to receive(:deliver_later)
  104        subject
  ...
  116
  117        it "does not send a cancellation email" do
  118:         expect(Spree::OrderMailer).not_to receive(:inventory_cancellation_email)
  119          subject
  120        end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order_shipping_spec.rb:
    9
   10    def emails
   11:     ActionMailer::Base.deliveries
   12    end
   13

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/reimbursement_spec.rb:
  147
  148      it "triggers the reimbursement mailer to be sent" do
  149:       expect(Spree::ReimbursementMailer).to receive(:reimbursement_email).with(reimbursement.id) { double(deliver_later: true) }
  150        subject
  151      end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/shipment_spec.rb:
  726            expect(unit.state).to eq('shipped')
  727          end
  728:       }.not_to change{ ActionMailer::Base.deliveries.count }
  729      end
  730    end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order/finalizing_spec.rb:
   52      it "should send an order confirmation email" do
   53        mail_message = double "Mail::Message"
   54:       expect(Spree::OrderMailer).to receive(:confirm_email).with(order).and_return mail_message
   55        expect(mail_message).to receive :deliver_later
   56        order.finalize!
   ..
   65      it "should not send duplicate confirmation emails" do
   66        allow(order).to receive_messages(confirmation_delivered?: true)
   67:       expect(Spree::OrderMailer).not_to receive(:confirm_email)
   68        order.finalize!
   69      end
   ..
   72        # Stub this method as it's called due to a callback
   73        # and it's irrelevant to this test
   74:       allow(Spree::OrderMailer).to receive_message_chain :confirm_email, :deliver_later
   75        adjustments = [double]
   76        expect(order).to receive(:all_adjustments).and_return(adjustments)

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/order/state_machine_spec.rb:
   89        end
   90
   91:       mail = ActionMailer::Base.deliveries.last
   92        expect(mail.subject).to include "Cancellation"
   93      end

/Users/miriam/code/masters/solidus-master/core/spec/models/spree/promotion_code/batch_builder_spec.rb:
   35      context "with a successful build" do
   36        before do
   37:         allow(Spree::PromotionCodeBatchMailer)
   38            .to receive(:promotion_code_batch_finished)
   39            .and_call_original

89 matches across 37 files
